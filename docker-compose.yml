version: '3.8'

services:
  # =====================
  # 数据库服务（MySQL）
  # =====================
  mysql:
    image: mysql:8.0
    container_name: coding-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: codingtracker
      MYSQL_USER: tracker_user
      MYSQL_PASSWORD: tracker_pass
    ports:
      - "3306:3306"  # 修改端口映射为 MySQL 默认端口
    volumes:
      - ./mysql-data:/var/lib/mysql  # 持久化数据，确保目录存在并且权限正确
    command: --default-authentication-plugin=mysql_native_password

  # =====================
  # 后端服务（Spring Boot）
  # =====================
  backend:
    build:
      context: ./backend  # 后端服务的上下文路径
      dockerfile: Dockerfile
    container_name: coding-backend
    restart: always
    depends_on:
      - mysql  # 等待 mysql 服务启动
    ports:
      - "9090:8080"  # 将容器内的 8080 端口映射到主机的 9090 端口
    environment:
      - MAVEN_OPTS=-Dmaven.repo.local=/root/.m2/repository  # 配置 Maven 本地仓库路径
      - TZ=Asia/Shanghai  # 设置时区
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/codingtracker?useSSL=false&serverTimezone=UTC  # Spring 数据源连接 MySQL
      - SPRING_DATASOURCE_USERNAME=tracker_user  # 数据库用户名
      - SPRING_DATASOURCE_PASSWORD=tracker_pass  # 数据库密码
    volumes:
      - ./settings.xml:/root/.m2/settings.xml
      - /home/user/avatars:/var/www/avatars  # 持久化头像存储目录

  # =====================
  # 前端服务（Vue）
  # =====================
  frontend:
    build:
      context: ./frontend  # 前端服务的上下文路径
      dockerfile: Dockerfile
    container_name: coding-frontend
    restart: always
    ports:
      - "80:80"  # 将容器内的 80 端口映射到主机的 80 端口
    depends_on:
      - backend  # 等待后端服务启动
    environment:
      - VUE_APP_BACKEND_URL=http://backend:8080  # 设置前端访问后端的 API 地址

# 持久化存储
volumes:
  mysql_data:
    driver: local
    
# mysql被墙
# 本地拉：docker pull mysql:8.0
# 保存：docker save mysql:8.0 -o mysql_8.0.tar
# 传到服务器：scp mysql_8.0.tar server:/root/
# 加载：docker load -i /root/mysql_8.0.tar
# 验证：docker images
# 运行：docker-compose up --build -d


# emmm,其它的也要，网上找一个最新的镜像才是王道

# 重启要rm -rf ./mysql-data/* 删除数据的卷，不然就不挂载，虽然我是怕数据掉
# 好像不是，唉
# docker-compose down -v  # 停止并删除容器和卷
# docker volume ls  # 检查卷是否仍然存在
# docker volume prune  # 删除未使用的卷
# docker-compose up --build  # 重新构建并启动所有服务
